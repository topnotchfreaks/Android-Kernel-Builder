name: "Build kernels"

env:
  CONFIGURATION: "repos.json"
  OUT_DIR: "out"

on:
  workflow_dispatch:
    inputs:
      kernelSUChoice:
        description: "Choose KernelSU version"
        required: true
        default: "KernelSU"
        type: choice
        options:
          - "None"
          - "KernelSU"
          - "KernelSU-Next"
          - "KernelSU-Next + Next-SuSFS"
          - "KernelSU by @rsuntk"

jobs:
  Set-repos:
    name: "üêÇ Parse repos.json"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
    steps:
      - name: "üòÑ Checkout"
        uses: actions/checkout@v4

      - name: "üòÜ Generate Matrix"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          cat  ${{ env.CONFIGURATION }} >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "üêé Build kernel"
    runs-on: ubuntu-latest
    needs:
      - Set-repos
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      kernelDir: ${{ matrix.repos.kernelSource.name }}_${{ matrix.repos.kernelSource.device }}

      kernelName: ${{ matrix.repos.kernelSource.name }}
      kernelRepo: ${{ matrix.repos.kernelSource.repo }}
      kernelBranch: ${{ matrix.repos.kernelSource.branch }}
      kernelDevice: ${{ matrix.repos.kernelSource.device }}

      DEFCONFIG_NAME: ${{ matrix.repos.kernelSource.device }}_defconfig

      withKernelSU: ${{ matrix.repos.withKernelSU }}
    steps:
      - name: "‚ú® Create working dir"
        run: mkdir -p $kernelDir

      - name: "üïí Generate Timestamp"
        run: echo "BUILD_TIME=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_ENV

      - name: "‚≠ê Install prerequisites"
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc curl flex cpio ccache rsync git zip dwarves libelf-dev ftp gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev lftp zstd wget libfl-dev python3 libarchive-tools clang lld llvm llvm-dev

      - name: "üåü Clone kernel source => (${{ env.kernelRepo }})"
        working-directory: ./${{ env.kernelDir }}
        run: |
          git clone --recursive --branch $kernelBranch $kernelRepo $kernelName --depth=1

      - name: "üí´ Get toolchains"
        env:
          toolchains: "${{ toJSON(matrix.repos.toolchains) }}"
        run: |
          toolchains_num="$(echo $toolchains | jq 'length')"
          echo "ü§î There are $toolchains_num defined toolchains."
  
          for ((i=0; i<toolchains_num; i++)); do
            toolchain=$(echo "$toolchains" | jq -r ".[$i]")
            toolchain_name=$(echo "$toolchain" | jq -r ".name")
  
            if echo "$toolchain" | jq -e 'has("url")' > /dev/null; then
              toolchain_url=$(echo "$toolchain" | jq -r ".url")
              mkdir -p "$toolchain_name"
              filename="${toolchain_url##*/}"
  
              echo "üöÄ Downloading $toolchain_name from $toolchain_url..."
              if wget --progress=bar:force -O "$filename" "$toolchain_url"; then
                case "$filename" in
                  *.zip) unzip -d "$toolchain_name" "$filename" ;;
                  *.tar) tar -xvf "$filename" -C "$toolchain_name" ;;
                  *.tar.gz|*.tgz) tar -zxvf "$filename" -C "$toolchain_name" ;;
                  *.tar.xz) tar -xJf "$filename" -C "$toolchain_name" ;;
                  *.rar) unrar x "$filename" "$toolchain_name" ;;
                  *) echo "‚ö†Ô∏è Unknown file type: $filename, skipping extraction." ;;
                esac
                rm -f "$filename"
                echo "‚úÖ Downloaded and extracted $toolchain_name"
                else
                echo "‚ùå Failed to download $toolchain_url"
                exit 1
                fi
            else
              toolchain_repo=$(echo "$toolchain" | jq -r ".repo")
              toolchain_branch=$(echo "$toolchain" | jq -r ".branch")
              echo "üöÄ Cloning $toolchain_name from $toolchain_repo (branch: $toolchain_branch)..."
              if git clone --recursive --depth=1 -j "$(nproc)" --branch "$toolchain_branch" "$toolchain_repo" "$toolchain_name"; then
                echo "‚úÖ Cloned $toolchain_name"
              else
                echo "‚ùå Failed to clone $toolchain_repo"
                exit 1
              fi
            fi
  
              # Properly iterate over binaryEnv and export paths
              echo "$toolchain" | jq -r ".binaryEnv[] | tostring" | while read -r subPath; do
                echo "${{ github.workspace }}/$toolchain_name/$subPath" >> "$GITHUB_PATH"
              done
            done  
        
      - name: "üõ† Set ZyC Clang as Default"
        run: |
          export CLANG_PATH="${{ github.workspace }}/clang/bin"
          if [ -d "$CLANG_PATH" ]; then
            echo "‚úÖ ZyC Clang found in $CLANG_PATH"
          else
            echo "‚ùå ZyC Clang NOT found, build might fail!"
            exit 1
          fi
    
            echo "CLANG_PATH=$CLANG_PATH" >> $GITHUB_ENV
            echo "$CLANG_PATH" >> $GITHUB_PATH  # Ensures path is updated
    
            export PATH="$CLANG_PATH:$PATH"
            export CLANG_TRIPLE="aarch64-linux-gnu-"
            export CC="clang"
            export AR="llvm-ar"
            export AS="llvm-as"
            export NM="llvm-nm"
            export OBJCOPY="llvm-objcopy"
            export OBJDUMP="llvm-objdump"
            export STRIP="llvm-strip"
    
            echo "‚öôÔ∏è Using Clang version:"
            clang --version
    
      - name: üìê Set swap to 20G
        uses: pierotofy/set-swap-space@master
        with:
            swap-size-gb: 20

      - name: "‚ö° Tune Swap Settings"
        run: |
            echo "vm.swappiness=80" | sudo tee -a /etc/sysctl.conf
            sudo sysctl -p

      - name: "‚ö° Configure ccache"
        run: |
            echo "CCACHE_DIR=${{ github.workspace }}/.ccache" >> $GITHUB_ENV
            echo "CC='ccache clang'" >> $GITHUB_ENV
            echo "CXX='ccache clang++'" >> $GITHUB_ENV
            echo "PATH=/usr/lib/ccache:$PATH" >> $GITHUB_ENV
          
      - name: "üòé Set args for GKI"
        id: generate-args
        working-directory: ./${{ env.kernelDir }}
        env:
            params: "${{ toJSON(matrix.repos.params) }}"
        run: |
            ARCH=$(echo $params | jq -r ".ARCH")
            CROSS_COMPILE=$(echo $params | jq -r ".CROSS_COMPILE")
            CROSS_COMPILE_ARM32=$(echo $params | jq -r ".CROSS_COMPILE_ARM32")
            CLANG_TRIPLE=$(echo $params | jq -r ".CLANG_TRIPLE")
            AR=$(echo $params | jq -r ".AR")
            CC=$(echo $params | jq -r ".CC")
          
            echo "ARCH=arm64" >> $GITHUB_ENV
            echo "LLVM=1" >> $GITHUB_ENV
            echo "LTO=thin" >> $GITHUB_ENV  # ‚úÖ Enable ThinLTO

            args="-j$(nproc --all)"
            if [ -n "${{ env.OUT_DIR }}" ]; then
              mkdir -p $(pwd)/${{ env.OUT_DIR }}
              args="$args O=$(pwd)/${{ env.OUT_DIR }}"
            fi
            args="$args ARCH=arm64 LLVM=1 LTO=thin"  # ‚úÖ Updated for GKI
            if [ -n "$CROSS_COMPILE" ]; then
              args="$args CROSS_COMPILE=$CROSS_COMPILE"
            fi
            if [ -n "$CLANG_TRIPLE" ]; then
              args="$args CLANG_TRIPLE=$CLANG_TRIPLE"
            fi
            if [ -n "$CROSS_COMPILE_ARM32" ]; then
              args="$args CROSS_COMPILE_ARM32=$CROSS_COMPILE_ARM32"
            fi
            if [ -n "$AR" ]; then
              args="$args AR=$AR"
            fi
            if [ -n "$CC" ]; then
              args="$args CC=$CC"
            fi
            echo "args=$args" >> $GITHUB_OUTPUT

      - name: "üòã Update KernelSU"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        if: ${{ github.event.inputs.kernelSUChoice == 'KernelSU' }}
        run: |
          if [ -d "./KernelSU" ]; then
            rm -rf "./KernelSU"
          fi
          if [ -d "./drivers/kernelsu" ]; then
            rm -rf "./drivers/kernelsu"
          fi
              
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -
              
          cat ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}            

      - name: "üòã Update KernelSU-Next"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        if: ${{ github.event.inputs.kernelSUChoice == 'KernelSU-Next' }}
        run: |
          if [ -d "./KernelSU-Next" ]; then
            rm -rf "./KernelSU-Next"
          fi
          if [ -d "./drivers/kernelsu" ]; then
            rm -rf "./drivers/kernelsu"
          fi

          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -

          cat ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}

      - name: "üòã Update KernelSU-Next + Next-SuSFS"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        if: ${{ github.event.inputs.kernelSUChoice == 'KernelSU-Next + Next-SuSFS' }}
        run: |
          if [ -d "./KernelSU-Next" ]; then
            rm -rf "./KernelSU-Next"
          fi
          if [ -d "./drivers/kernelsu" ]; then
            rm -rf "./drivers/kernelsu"
          fi

          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -

          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next-susfs/kernel/setup.sh" | bash -s next-susfs

          cat ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}

      - name: "üòã Update KernelSU by @rsuntk"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        if: ${{ github.event.inputs.kernelSUChoice == 'KernelSU by @rsuntk' }}
        run: |
          if [ -d "./KernelSU" ]; then
            rm -rf "./KernelSU"
          fi
          if [ -d "./drivers/kernelsu" ]; then
            rm -rf "./drivers/kernelsu"
          fi

          curl -LSs "https://raw.githubusercontent.com/rsuntk/KernelSU/main/kernel/setup.sh" | bash -s main

          cat ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}

      - name: "üîç KernelSU check"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          if [ "${{ github.event.inputs.kernelSUChoice }}" == "None" ]; then
            echo "Non-KSU Build"
          else
            echo "KSU Build"
          fi

      - name: üòã Setup KSU SUSFS
        env: 
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
          DEFCONFIG: ${{ env.WORKSPACE }}/${{ env.KERNEL_NAME }}/arch/${{ steps.generate-args.outputs.ARCH }}/configs/${{env.KERNEL_DEFCONFIG_PATH}}
          SFS_BRANCH: ${{ matrix.CONFIG.KernelSUSFS.branches }}
        if: ${{ env.ENABLE_KERNELSU == 'true' && env.ENABLE_KERNELSU_SFS == 'true' }}
        run: |
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "${{env.SFS_BRANCH}}"
          git clone https://github.com/luyanci/kernel_patches.git

          cd ${{env.KERNEL_NAME}}
          cp ../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./KernelSU/
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_${{env.SFS_BRANCH}}.patch ./
          cp ../susfs4ksu/kernel_patches/fs/* ./fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/

          cd ./KernelSU
          
          # Apply SUSFS patch for KernelSU
          # patch -p1 --forward < 10_enable_susfs_for_ksu.patch || true

          # Apply makefile for ksu to auto patch kernelSource
          echo "Patch KSU makefile to auto patch kernelSource"
          cp ../../kernel_patches/rksu2-Kernel-Auto-adding-path_umount-patch-into-the-kernel.patch ./rksu-Kernel-Auto-adding-path_umount-patch-into-the-kernel.patch
          patch -p1 --forward < rksu-Kernel-Auto-adding-path_umount-patch-into-the-kernel.patch || true

          # Change to common directory and apply SUSFS patch
          cd ..
          patch -p1 < 50_add_susfs_in_${{env.SFS_BRANCH}}.patch || true

          # Apply Hide Stuff Patches
          cp ../kernel_patches/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch || true
          
          # Add SUSFS configuration settings
          echo "Adding configuration settings to defconfig..."

          echo "CONFIG_KSU=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=n" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          
          # Add additional tmpfs config setting
          echo "CONFIG_TMPFS_XATTR=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}

          cat arch/${{ env.ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
  
      - name: "üëç Make defconfig"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          echo "PATH Variable: $PATH"
          make ${{ env.args }} ${{ env.DEFCONFIG_NAME }}

      - name: "üé∂ Build kernel"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          export KBUILD_BUILD_USER="Action"
          export KBUILD_BUILD_HOST="GitHub"
        
          # Enable CCache
          export CCACHE_DIR="${{ github.workspace }}/.ccache"
          export CCACHE_COMPRESS=1
          export CCACHE_COMPRESSLEVEL=6
          export CCACHE_MAXSIZE=10G
          export CCACHE_CPP2=yes
          ccache -z  # Reset stats
        
          # Build Kernel
          make ${args} \
            LLVM=1 \
            LTO=thin \
            CC=clang \
            AR=llvm-ar \
            AS=llvm-as \
            NM=llvm-nm \
            OBJCOPY=llvm-objcopy \
            OBJDUMP=llvm-objdump \
            STRIP=llvm-strip \
            KBUILD_BUILD_USER="$KBUILD_BUILD_USER" \
            KBUILD_BUILD_HOST="$KBUILD_BUILD_HOST" \
            -j$(nproc --all)
        
      - name: "üì§ Save ccache Cache"
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-ccache-${{ github.sha }}
        
      - name: "üìú Save Build Logs"
        if: failure()  # Only upload logs if the build fails
        run: |
          mkdir -p logs
          cp out/*.log logs/ || true  # Copy build logs (adjust path if needed)
        
      - name: "üì§ Upload Logs"
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: logs/
        
      - name: "üíõ Upload Image"
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.kernelDevice }}_${{ env.kernelName }}_${{ env.kernelBranch }}_${{ env.BUILD_TIME }}"
          path: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image
          if-no-files-found: ignore
          retention-days: 7
